import java_cup.runtime.*;
import compiler.core.*;
import compiler.analysis.*;
import compiler.util.*;
import java.util.ArrayList;

parser code  {:
  public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error on: \n");

   if (info instanceof compiler.core.JavaSymbol) {
      compiler.core.JavaSymbol s = ((compiler.core.JavaSymbol) info);

      m.append( s.toString()  + "\n");
   }

   m.append("Message : " + message  + "\n");

   System.out.println(m);
  }

  public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
  }
:};


//---------------------------TERMINALS------------------------------------------

// PALAVRAS RESERVADAS
terminal PROGRAM, BEGIN, END, ARRAY, LABEL, CONST, TYPE, VAR, FORWARD,
PROCEDURE, FUNCTION, USES, GOTO, WHILE, DO, PACKED, RECORD, SET, FILE,
UNTIL, REPEAT, FOR, TO, DOWNTO,
IF, THEN, ELSE, CASE, OF, WITH ;
// INTERFACE,IMPLEMENTATION,EXTERNAL,IN,UNIT


// TIPOS
terminal INTEGER, BOOLEAN, REAL, STRING, CHAR;

// VALUES
terminal java.lang.String IDENTIFIER, NIL, STRING_LITERAL, INTEGER_LITERAL,
FLOATING_POINT_LITERAL, TRUE, FALSE;

// SEPARADORES
terminal DOT, LPAREN, RPAREN, COMMA, SEMICOLON, COLON, ASSIGNMENT, LBRAC,
RBRAC, DOTDOT;

// RELATIONAL OPERATORS
terminal LT, LE, GE, GT, EQUAL, NOTEQUAL;

// BOOLEAN OPERATORS
terminal AND, NOT, OR, ORELSE, ANDTHEN;

// ARITHMETIC OPERATORS
terminal PLUS, MINUS, SLASH, STAR, MOD, DIV;
// STARSTAR,

// BIT OPERATORS
//terminal  XOR, SHL, SHR;

// OTHERS
terminal UPARROW;

//---------------------------NON TERMINALS--------------------------------------


// EXPRESSION
non terminal arithmetic_operator, boolean_operator, boolean;
non terminal if_statement_aux, const_aux, type_definition_part_aux;
non terminal procedure_declaration_aux, case_limbs, statement_aux;

non terminal compilation_unit, program_heading, block, identifier_list, identifier_list_aux, component_variable_aux;
non terminal declaration_part, procedure_and_function_declaration_part, program_heading_aux;
non terminal label_declaration_part, constant_definition_part, type_definition, type_definition_part, variable_declaration_part, uses_definition_part;
non terminal label, label_optionals, formal_parameter_section, aux_formal_parameter_section, procedure_identifier;
non terminal constant_definition, constant_definition_aux, constant, optional_formal_parameter_list, formal_parameter_list;
non terminal statement_part, procedure_identification, function_heading, function_identification, function_body, function_identifier;
non terminal sign, sign_optional, digit_sequence, integer_number, compiler_defined_directives, statement_sequence, result_type, statement, aux_statement_sequence, optional_label, simple_statement, structured_statement, assignment_statement, procedure_statement, goto_statement, variable, expression, actual_parameter_list, compound_statement, repetitive_statement, conditional_statement, with_statement, while_statement, repeat_statement, for_statement, variable_identifier, initial_expression, final_expression, if_statement, case_statement, case_limb, case_limb_aux, case_label_list, case_label_list_aux, record_variable, record_variable_aux;
non terminal type, variable_declaration, procedure_declaration, function_declaration, procedure_heading, procedure_body, directive;
non terminal type_identifier, constant_identifier, number, string, real_number, simple_type, structured_type, pointer_type,
actual_parameter, actual_value, actual_variable, actual_function, actual_procedure, actual_parameter_aux;
non terminal value_parameter_section, variable_parameter_section, procedure_parameter_section, function_parameter_section, parameter_type,
conformant_array_schema, packed_conformant_array_schema, unpacked_conformant_array_schema, bound_specification, bound_specification_aux;
non terminal ordinal_type_identifier, simple_expression, expression_aux, relational_operator, term, simple_expression_aux,
factor, term_aux, multiplication_operator, set, bound_identifier, function_designator, component_variable;
non terminal referenced_variable, field_identifier, indexed_variable, field_designator, file_buffer, array_variable, expression_list,
element_list, element_list_aux, optional_actual_parameter_list, file_variable;
non terminal field_list_aux, fixed_part, fixed_part_aux, variant_part, record_section, tag_field, variant, variant_part_aux;
non terminal subrange_type, enumerated_type, lower_bound, upper_bound, unpacked_structured_type, array_type, record_type, set_type,
file_type, index_type, array_type_aux, element_type, field_list, base_type, file_component_type;
non terminal pointer_variable, variable_list, expression_list_aux, simple_statement_aux, variable_declaration_part_aux, primary_type;
non terminal factor_aux;


//-------------------------------GRAMMAR----------------------------------------

start with compilation_unit;


compilation_unit ::=
  {:Logger.print("Compilation UNIT");:}
	program_heading block DOT
;

program_heading ::=
   PROGRAM IDENTIFIER program_heading_aux
;

program_heading_aux ::=
  {:Logger.print("Program Heading Aux - line 1");:} LPAREN identifier_list RPAREN SEMICOLON |
  {:Logger.print("Program Heading Aux - line 2");:} SEMICOLON
;

block ::=
  {:Logger.print("Block");:} declaration_part statement_part:exp {:RESULT=exp;:}
;

declaration_part ::=
    {:Logger.print("Declaration Part");:}
    label_declaration_part uses_definition_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part
;

statement_part ::=
  {:Logger.print("Statement Part");:} BEGIN statement_sequence:exp END {:RESULT=exp;:}
;

label_declaration_part ::=
  {:Logger.print("Label Declaration Part - Vazio");:} |
  {:Logger.print("Label Declaration Part - line 2");:} LABEL label label_optionals SEMICOLON
;

label_optionals ::=
    {:Logger.print("Label optionals - Vazio");:} |
    {:Logger.print("Label optionals - line 2");:} COMMA label label_optionals
;

constant_definition_part ::=
  {:Logger.print("Constant definition part - Vazio");:} |
  {:Logger.print("Constant definition part - line 2");:} CONST constant_definition SEMICOLON constant_definition_aux
;

constant_definition ::=
  {:Logger.print("Constant Definition");:} IDENTIFIER:id EQUAL constant {: SemanticImpl.getInstance().addVariable(new Variable(null, id, true));:}
;

constant_definition_aux ::=
    {:Logger.print("Constant Definition aux - Vazio");:} |
    {:Logger.print("Constant Definition aux - line 2");:} constant_definition SEMICOLON constant_definition_aux
;

type_definition_part ::=
  {:Logger.print("Type definition part - Vazio");:} |
  {:Logger.print("Type definition part - line 2");:} TYPE type_definition SEMICOLON type_definition_part_aux
;

type_definition_part_aux ::=
  {:Logger.print("Type definition part Aux - Vazio");:} |
  {:Logger.print("Type definition part Aux - line 2");:} type_definition SEMICOLON type_definition_part_aux
;

type_definition ::=
  {:Logger.print("Type definition");:} IDENTIFIER EQUAL type
;

uses_definition_part ::=
  {:Logger.print("Uses definition Part - Vazio");:} |
  {:Logger.print("Uses definition Part - line 2");:} USES IDENTIFIER SEMICOLON
;

variable_declaration_part ::=
  {:Logger.print("Variable declaration part - Vazio");:} |
  {:Logger.print("Variable declaration part - line 2");:} VAR variable_declaration SEMICOLON variable_declaration_part_aux
;

variable_declaration_part_aux ::=
  {:Logger.print("Variable declaration part Aux - Vazio");:} |
  {:Logger.print("Variable declaration part Aux - line 2");:} variable_declaration SEMICOLON variable_declaration_part_aux
;

variable_declaration ::=
  {:Logger.print("Variable declaration");:} identifier_list COLON type:t {: SemanticImpl.getInstance().addVariablesFromTempList(new Type((String)t)); :}
;

procedure_and_function_declaration_part ::=
  {:Logger.print("Procedure and function declaration part - Vazio");:} |
	{:Logger.print("Procedure and function declaration part - line 2");:} procedure_declaration SEMICOLON {: SemanticImpl.getInstance().exitCurrentScope(); :} procedure_and_function_declaration_part |
	{:Logger.print("Procedure and function declaration part - line 3");:} function_declaration SEMICOLON procedure_and_function_declaration_part
;

procedure_declaration ::=
  {:Logger.print("Procedure declaration - line 1");:} procedure_heading:id {:SemanticImpl.getInstance().addFunctionProcedureAndNewScope(new Procedure((String) id, SemanticImpl.getInstance().getParameters()));:} SEMICOLON procedure_declaration_aux {:RESULT=id;:} |
  {:Logger.print("Procedure declaration - line 2");:} procedure_identification:id {:SemanticImpl.getInstance().addFunctionProcedureAndNewScope(new Procedure((String) id, SemanticImpl.getInstance().getParameters()));:} SEMICOLON procedure_body {:RESULT=id;:}
;

procedure_declaration_aux ::=
   {:Logger.print("Procedure declaration aux - line 1");:} procedure_body |
   {:Logger.print("Procedure declaration aux - line 2");:} directive
;

procedure_body ::=
  {:Logger.print("Procedure body");:} block
;

function_declaration ::=
  {:Logger.print("Function declaration - line 1");:} function_heading:id SEMICOLON function_body:exp
  {:
      SemanticImpl.getInstance().validateFunction((Expression)exp, (String)id);
  :} |
	{:Logger.print("Function declaration - line 2");:} function_heading SEMICOLON directive
;

function_body ::=
  {:Logger.print("Function Body");:} block:exp {:RESULT = exp;:}
;

directive ::=
  {:Logger.print("Directive - line 1");:} FORWARD |
	{:Logger.print("Directive - line 2");:} compiler_defined_directives
;

statement_part ::=
  {:Logger.print("Statement Part");:} BEGIN statement_sequence:exp END {:RESULT=exp;:}
;

optional_formal_parameter_list ::=
  {:Logger.print("Optional formal parameter list - Vazio");:} |
  {:Logger.print("Optional formal parameter list - line 2");:} formal_parameter_list
;

formal_parameter_list ::=
  {:Logger.print("Formal parameter list");:} LPAREN formal_parameter_section aux_formal_parameter_section RPAREN
;

aux_formal_parameter_section ::=
  {:Logger.print("Aux formal parameter section - Vazio");:} |
  {:Logger.print("Aux formal parameter section - line 2");:} SEMICOLON formal_parameter_section aux_formal_parameter_section
;

procedure_identification ::=
  {:Logger.print("Procedure Identification");:} PROCEDURE procedure_identifier:id {:RESULT=id;:}
;

procedure_identifier ::=
  {:Logger.print("Procedure identifier");:} IDENTIFIER:id {:RESULT=id;:}
;

function_identifier ::=
  {:Logger.print("Function Identifier");:} IDENTIFIER:id {:RESULT=id;:}
;

function_heading ::=
  {:Logger.print("Function Heading");:} FUNCTION IDENTIFIER:id optional_formal_parameter_list COLON result_type:rt {:
    SemanticImpl.getInstance().addFunctionProcedureAndNewScope(new Function((String) id, SemanticImpl.getInstance().getParameters()));
    SemanticImpl.getInstance().setReturnType(id, new Type((String)rt)); RESULT=id;
  :}
;

procedure_heading ::=
  {:Logger.print("Procedure Heading");:} PROCEDURE IDENTIFIER:id {:RESULT=id;:} optional_formal_parameter_list
;

result_type ::=
  {:Logger.print("Result type");:} type:t {:RESULT = t;:}
;

function_identification ::=
  {:Logger.print("Function Identificaton");:} FUNCTION function_identifier
;

compiler_defined_directives ::=
  {:Logger.print("Compiler directives");:}
;

statement_sequence ::=
  {:Logger.print("Statement sequence");:} statement:exp1 aux_statement_sequence:exp2 {:if(exp2==null) {RESULT=exp1;} else {RESULT=exp2;};:}
;

aux_statement_sequence ::=
  {:Logger.print("Aux statement sequence - Vazio");:} |
  {:Logger.print("Aux statement sequence - line 2 -> statement ; aux_statement_sequence");:} SEMICOLON statement:exp1 aux_statement_sequence:exp2 {:if(exp2==null) {RESULT=exp1;} else {RESULT=exp2;};:}
;

statement ::=
  {:Logger.print("Statement - line 1");:} optional_label statement_aux:exp {:RESULT=exp;:}
;

statement_aux ::=
  {:Logger.print("Statement Aux - line 1");:} simple_statement:exp {:RESULT=exp;:} |
  {:Logger.print("Statement Aux - line 2");:} structured_statement
;

optional_label ::=
  {:Logger.print("Optional Label - Vazio");:} |
  {:Logger.print("Optional Label - line 2");:} label COLON
;

simple_statement ::=
  {:Logger.print("Simple Statement - Vazio");:} |
  {:Logger.print("Simple Statement - line 2");:} variable:id {:SemanticImpl.getInstance().setSelectedId((String)id);:} simple_statement_aux |
  {:Logger.print("Simple Statement - line 3");:} goto_statement
;

simple_statement_aux ::=
  {:Logger.print("Simple Statement Aux - procedure");:} procedure_statement |
  {:Logger.print("Simple Statement Aux - assignment");:} assignment_statement
;

assignment_statement ::=
  {:Logger.print("Assignment Statement");:} ASSIGNMENT expression
;

procedure_statement ::=
  {:Logger.print("Procedure statement");:} actual_parameter_list
  {:
    SemanticImpl.getInstance().checkFunctionCall();
  :}
;

goto_statement ::=
  {:Logger.print("Go to statement");:} GOTO label
;

structured_statement ::=
  {:Logger.print("Structured statement - line 1");:} compound_statement |
  {:Logger.print("Structured statement - line 2");:} repetitive_statement |
  {:Logger.print("Structured statement - line 3");:} conditional_statement |
  {:Logger.print("Structured statement - line 4");:} with_statement
;

compound_statement ::=
  {:Logger.print("Compound statement");:} BEGIN statement_sequence END
;

repetitive_statement ::=
  {:Logger.print("Repetitive Statment - line 1");:} while_statement |
  {:Logger.print("Repetitive Statment - line 2");:} repeat_statement |
  {:Logger.print("Repetitive Statment - line 3");:} for_statement
;

while_statement ::=
  {:Logger.print("While statement Part");:} WHILE expression DO statement
;

repeat_statement ::=
  {:Logger.print("Repeat statement");:} REPEAT statement_sequence UNTIL expression
;

for_statement ::=
  {:Logger.print("For Statement - line 1");:} FOR variable_identifier ASSIGNMENT initial_expression TO final_expression DO statement |
  {:Logger.print("For Statement - line 2");:} FOR variable_identifier ASSIGNMENT initial_expression DOWNTO final_expression DO statement
;

initial_expression ::=
  {:Logger.print("Initial Expression");:} expression
;

final_expression ::=
  {:Logger.print("Final Expression");:} expression
;

conditional_statement ::=
  {:Logger.print("Conditional Statement - line 1");:} if_statement |
  {:Logger.print("Conditional Statement - line 2");:} case_statement
;

if_statement ::=
  {:Logger.print("If Statement - line 1");:} IF expression THEN statement if_statement_aux
;

if_statement_aux ::=
  {:Logger.print("If Statement Aux- ELSE");:} ELSE statement |
  {:Logger.print("If Statement Aux -  Vazio");:}
;

case_statement ::=
  {:Logger.print("Case Statement - line 1");:} CASE expression OF case_limbs END
;

case_limbs ::=
  {:Logger.print("Case Limbs");:} case_limb SEMICOLON case_limb_aux
;

case_limb ::=
  {:Logger.print("Case Limb");:} case_label_list COLON statement
;

case_limb_aux ::=
  {:Logger.print("Case Limb Aux - Vazio");:} |
  {:Logger.print("Case Limb Aux - line 1");:} case_limb SEMICOLON case_limb_aux
;

case_label_list ::=
  {:Logger.print("Case Label List");:} constant case_label_list_aux
;

case_label_list_aux ::=
  {:Logger.print("Case label list AUX - Vazio");:} |
  {:Logger.print("Case label list AUX -  , constant case_label_list_aux");:} COMMA constant case_label_list_aux
;

with_statement ::=
  {:Logger.print("With Statement");:} WITH record_variable record_variable_aux DO statement
;

record_variable_aux ::=
  {:Logger.print("Record Variable Aux - Vazio");:} |
  {:Logger.print("Record Variable Aux - line 2");:} COLON record_variable record_variable_aux
;


label ::=
  {:Logger.print("Label");:} integer_number
;

actual_parameter_list ::=
  {:Logger.print("Actual Parameter List - Vazio");:} |
  {:
    Logger.print("Actual Parameter List - line 2");
    SemanticImpl.getInstance().clearParameterList();
  :} LPAREN actual_parameter  actual_parameter_aux RPAREN
;

actual_parameter ::=
  {:Logger.print("Actual Parameter - line 1");:} expression:exp
  {:
    SemanticImpl.getInstance().addToTempParameter( new DeclarationParameter( ((Expression) exp).getType(), ((Expression) exp).getValue() ));
  :}
;

actual_parameter_aux ::=
  {:Logger.print("Actual Parameter Aux - Vazio");:} |
  {:Logger.print("Actual Parameter Aux - line 2");:} COMMA actual_parameter actual_parameter_aux
;

formal_parameter_section ::=
  {:Logger.print("Formal parameter section - line 1");:} value_parameter_section |
  {:Logger.print("Formal parameter section - line 2");:} variable_parameter_section |
  {:Logger.print("Formal parameter section - line 3");:} procedure_parameter_section |
  {:Logger.print("Formal parameter section - line 4");:} function_parameter_section |
  {:Logger.print("Formal parameter section - Vazio");:}
;

value_parameter_section ::=
  {:Logger.print("Value parameter section");:} identifier_list COLON parameter_type:pt {:SemanticImpl.getInstance().createParameters(new Type((String) pt));:}
;

variable_parameter_section ::=
  {:Logger.print("Variable parameter section");:} VAR identifier_list COLON parameter_type
;

procedure_parameter_section ::=
  {:Logger.print("Procedure parameter section");:} procedure_heading
;

function_parameter_section ::=
  {:Logger.print("Function parameter section");:} function_heading
;

parameter_type ::=
  {:Logger.print("Parameter type - line 1");:} type:t {:RESULT=t;:}
;

conformant_array_schema ::=
  {:Logger.print("Conformant array schema - line 1");:} packed_conformant_array_schema |
  {:Logger.print("Conformant array schema - line 2");:} unpacked_conformant_array_schema
;

packed_conformant_array_schema ::=
  {:Logger.print("Packed conformant array schema");:} PACKED ARRAY LBRAC bound_specification RBRAC OF type_identifier
;

unpacked_conformant_array_schema ::=
  {:Logger.print("Unpacked conformant array schema - line 1");:} ARRAY LBRAC bound_specification bound_specification_aux RBRAC OF type_identifier |
  {:Logger.print("Unpacked conformant array schema - line 2");:} ARRAY LBRAC bound_specification bound_specification_aux RBRAC OF conformant_array_schema
;

bound_specification_aux ::=
  {:Logger.print("Bound specification aux - Vazio");:} |
  {:Logger.print("Bound specification aux - line 2");:} SEMICOLON bound_specification bound_specification_aux
;

bound_specification ::=
  {:Logger.print("Bound Specification");:} IDENTIFIER DOTDOT IDENTIFIER COLON ordinal_type_identifier
;

ordinal_type_identifier ::=
  {:Logger.print("Ordinal type identifier");:} type_identifier
;

expression ::=
  {:Logger.print("Expression");:} simple_expression:exp {:RESULT=exp;:}
;

simple_expression ::=
  {:Logger.print("Simple Expression");:} sign_optional term:t simple_expression_aux {:RESULT=t;:}
;

simple_expression_aux ::=
  {:Logger.print("Simple Expression Aux - Vazio");:} |
  {:Logger.print("Simple Expression Aux - Arithmetic Operation");:} arithmetic_operator term simple_expression_aux |
  {:Logger.print("Simple Expression Aux - Relational Operation");:} relational_operator term simple_expression_aux |
  {:Logger.print("Simple Expression Aux - Boolean Operation");:}    boolean_operator    term simple_expression_aux
;

term ::=
  {:Logger.print("Term");:} factor:f {:RESULT=f;:}
;

factor ::=
  {:Logger.print("Factor - number");:} number:n {:RESULT=n;:} |
  {:Logger.print("Factor - string");:} string:s {:RESULT= new Expression(new Type("string"), (String)s);:} |
  {:Logger.print("Factor - set");:} set:s {:RESULT= new Expression(new Type("set"), (String)s);:} |
  {:Logger.print("Factor - NIL");:} NIL:n {:RESULT= new Expression(new Type("nil"), (String)n);:} |
  {:Logger.print("Factor - ( expression )");:} LPAREN expression:exp RPAREN {:RESULT=exp;:} |
  {:Logger.print("Factor - not factor");:} NOT factor:f {:RESULT=f;:} |
  {:Logger.print("Factor - variable | function");:} IDENTIFIER:id factor_aux {: SemanticImpl.getInstance().getTypeByID((String)id); :} |
  {:Logger.print("Factor - boolean");:} boolean:b {:RESULT= new Expression(new Type("boolean"), (String)b);:}
;

factor_aux ::=
  {:Logger.print("Factor Aux - variable");:} component_variable |
  {:Logger.print("Factor Aux - function");:} function_designator
;

relational_operator ::=
  {:Logger.print("Relational Operator - =");:} EQUAL |
  {:Logger.print("Relational Operator - <>");:} NOTEQUAL |
  {:Logger.print("Relational Operator - <");:} LT |
  {:Logger.print("Relational Operator - <=");:} LE |
  {:Logger.print("Relational Operator - >=");:} GE |
  {:Logger.print("Relational Operator - >");:} GT
;

arithmetic_operator ::=
  {:Logger.print("Arithmetic Operator : +");:} PLUS |
  {:Logger.print("Arithmetic Operator : -");:} MINUS |
  {:Logger.print("Arithmetic Operator : *");:} STAR |
  {:Logger.print("Arithmetic Operator : /");:} SLASH |
  {:Logger.print("Arithmetic Operator : %");:} MOD
;

boolean_operator ::=
  {:Logger.print("Boolean Operator - ");:} AND |
  {:Logger.print("Boolean Operator - ");:} NOT |
  {:Logger.print("Boolean Operator - ");:} OR |
  {:Logger.print("Boolean Operator - ");:} ORELSE |
  {:Logger.print("Boolean Operator - ");:} ANDTHEN
;

multiplication_operator ::=
  {:Logger.print("Multiplication Operator - line 1");:} STAR |
  {:Logger.print("Multiplication Operator - line 2");:} DIV |
  {:Logger.print("Multiplication Operator - line 3");:} SLASH |
  {:Logger.print("Multiplication Operator - line 4");:} MOD |
  {:Logger.print("Multiplication Operator - line 5");:} AND
;

variable ::=
  {:Logger.print("Variable - line 1");:} variable_identifier:id component_variable {:RESULT=id;:}
;

component_variable ::=
  {:Logger.print("Component Variable - Vazio");:} |
  {:Logger.print("Component Variable - line 2");:} component_variable_aux  // LBRAC expression_list RBRAC |
;

component_variable_aux ::=
  {:Logger.print("Component Variable Aux - [ exp_list ]");:} LBRAC expression_list RBRAC
| {:Logger.print("Component Variable Aux - .field_identifier");:} DOT field_identifier
| {:Logger.print("Component Variable Aux - UPARROW");:} UPARROW
;

field_designator ::=
  {:Logger.print("Field Designator");:} record_variable DOT field_identifier
;

set ::=
  {:Logger.print("Set");:} LBRAC element_list RBRAC
;

element_list ::=
  {:Logger.print("Element List - Vazio");:} |
  {:Logger.print("Element List - line 2");:} expression element_list_aux
;

element_list_aux ::=
  {:Logger.print("Element List Aux - Vazio");:} |
  {:Logger.print("Element List Aux - line 2");:} COMMA expression element_list_aux
;

function_designator ::=
  {:Logger.print("Function Designator");:} optional_actual_parameter_list
;

optional_actual_parameter_list ::=
  {:Logger.print("Optional Actual Parameter List - Vazio");:} |
  {:Logger.print("Optional Actual Parameter List - line 2");:} actual_parameter_list
;

file_buffer ::=
  {:Logger.print("File Bufffer");:} file_variable UPARROW
;

// Types

type ::=
  {:Logger.print("Type - line 1");:} primary_type:t {: RESULT = t; :} |
  {:Logger.print("Type - line 2");:} simple_type:t {: RESULT = t; :} |
  {:Logger.print("Type - line 3");:} structured_type:t {: RESULT = t; :} |
  {:Logger.print("Type - line 4");:} pointer_type:t {: RESULT = t; :}
;

primary_type ::=
  {:Logger.print("Primary Type - STRING");:} STRING {: RESULT = "String"; :}|
  {:Logger.print("Primary Type - INTEGER");:} INTEGER {: RESULT = "Integer"; :}|
  {:Logger.print("Primary Type - CHAR");:} CHAR {: RESULT = "Char"; :}|
  {:Logger.print("Primary Type - REAL");:} REAL {: RESULT = "Real"; :}|
  {:Logger.print("Primary Type - BOOLEAN");:} BOOLEAN {: RESULT = "Boolean"; :}|
  {:Logger.print("Primary Type - ID");:} type_identifier:id {: RESULT = id;  :}
;


simple_type ::=
  {:Logger.print("Simple Type - line 1");:} subrange_type |
  {:Logger.print("Simple Type - line 2");:} enumerated_type
;

enumerated_type ::=
  {:Logger.print("Enumerated Type");:} LPAREN identifier_list RPAREN
;

subrange_type ::=
  {:Logger.print("Subrange Type");:} lower_bound DOTDOT upper_bound
;

lower_bound ::=
  {:Logger.print("Lower Bound");:} constant
;

upper_bound ::=
  {:Logger.print("Upper Bound");:} constant
;

structured_type ::=
  {:Logger.print("Structure Type - line 1");:} unpacked_structured_type |
  {:Logger.print("Structure Type - line 2");:} PACKED unpacked_structured_type
;

unpacked_structured_type ::=
  {:Logger.print("Unpacked Structured Type - line 1");:} array_type |
  {:Logger.print("Unpacked Structured Type - line 2");:} record_type |
  {:Logger.print("Unpacked Structured Type - line 3");:} set_type |
  {:Logger.print("Unpacked Structured Type - line 4");:} file_type
;

array_type ::=
  {:Logger.print("Array Type");:} ARRAY LBRAC index_type array_type_aux RBRAC OF element_type
;

array_type_aux ::=
  {:Logger.print("Array Type Aux - Vazio");:} |
  {:Logger.print("Array Type Aux - line 2");:} COMMA index_type array_type_aux
;

index_type ::=
  {:Logger.print("Index Type");:} simple_type
;

element_type ::=
  {:Logger.print("Element Type");:} type
;

record_type ::=
  {:Logger.print("Record Type");:} RECORD field_list END
;

set_type ::=
  {:Logger.print("Set Type");:} SET OF base_type
;

base_type ::=
  {:Logger.print("Base Type");:} type
;

file_type ::=
  {:Logger.print("File Type");:} FILE OF file_component_type
;

file_component_type ::=
  {:Logger.print("File Component Type");:} type
;

pointer_type ::=
  {:Logger.print("Pointer Type");:} UPARROW type_identifier
;

// Record Fields

field_list ::=
  {:Logger.print("Field List - Vazio");:} |
  {:Logger.print("Field List - line 2");:} field_list_aux |
  {:Logger.print("Field List - line 3");:} field_list_aux SEMICOLON
;

field_list_aux ::=
  {:Logger.print("Field List Aux- line 1");:} fixed_part SEMICOLON variant_part |
  {:Logger.print("Field List Aux- line 2");:} fixed_part |
  {:Logger.print("Field List Aux- line 3");:} variant_part
;

fixed_part ::=
  {:Logger.print("Fixed Part");:} record_section fixed_part_aux
;

fixed_part_aux ::=
  {:Logger.print("Fixed Part Aux - Vazio");:} |
  {:Logger.print("Fixed Part Aux - line 2");:} SEMICOLON record_section fixed_part_aux
;

record_section ::=
  identifier_list COLON type
;

variant_part ::=
  {:Logger.print("Variant Part");:} CASE tag_field type_identifier OF variant variant_part_aux
;

variant_part_aux ::=
  {:Logger.print("Variant Part Aux - Vazio");:} |
  {:Logger.print("Variant Part Aux - line 2");:} SEMICOLON variant
;

tag_field ::=
  {:Logger.print("Tag Field - Vazio");:} |
  {:Logger.print("Tag Field - line 2");:} IDENTIFIER COLON
;

variant ::=
  {:Logger.print("Variant");:} case_label_list COLON LPAREN field_list RPAREN
;

// Variable and Identifier Categories

file_variable ::=
  {:Logger.print("File Variable");:} variable
;

referenced_variable ::=
  {:Logger.print("Referenced Variable");:} pointer_variable UPARROW
;

record_variable ::=
  {:Logger.print("Record Variable");:} variable
;

pointer_variable ::=
  {:Logger.print("Pointer Variable");:} variable
;

actual_variable ::=
  {:Logger.print("Actual Variable");:} variable
;

array_variable ::=
  {:Logger.print("Array Variable");:} variable_identifier
;

field_identifier ::=
  {:Logger.print("Field Identifier");:} IDENTIFIER
;

constant_identifier ::=
  {:Logger.print("Constant Identifier");:} IDENTIFIER:id {:RESULT=id;:}
;

variable_identifier ::=
  {:Logger.print("Variable Identifier");:} IDENTIFIER:id {:RESULT=id;:}
;

type_identifier ::=
  {:Logger.print("Type Identifier");:} IDENTIFIER:id {: RESULT = id; :}
;

procedure_identifier ::=
  {:Logger.print("Procedure Identifier");:} IDENTIFIER
;

function_identifier ::=
  {:Logger.print("Function Identifier");:} IDENTIFIER
;

identifier_list ::=
  {:Logger.print("Identifier List"); SemanticImpl.getInstance().clearIdTempList();:} IDENTIFIER:id {:SemanticImpl.getInstance().addIdToTempList(id);:} identifier_list_aux
;

identifier_list_aux ::=
  {:Logger.print("Identifier List Aux - Vazio"); :} |
  {:Logger.print("Identifier List Aux - line 2");:} COMMA IDENTIFIER:id {:SemanticImpl.getInstance().addIdToTempList(id);:} identifier_list_aux
;

expression_list ::=
  {:Logger.print("Expression List");:} expression expression_list_aux
;

expression_list_aux ::=
  {:Logger.print("Expression List Aux - Vazio");:} |
  {:Logger.print("Expression List Aux - line 2");:} COMMA expression expression_list_aux
;

number ::=
  {:Logger.print("Number - line 1");:} integer_number:i {:RESULT= new Expression(new Type("integer"), (String)i);:} |
  {:Logger.print("Number - line 2");:} real_number:r {:RESULT= new Expression(new Type("real"), (String)r);:}
;

integer_number ::=
  {:Logger.print("Integer Number" );:} digit_sequence:d {:RESULT=d;:}
;

digit_sequence ::=
  {:Logger.print("Digit Sequence");:} sign_optional INTEGER_LITERAL:i {:RESULT=i;:}
;

real_number ::=
  {:Logger.print("Real Number");:} FLOATING_POINT_LITERAL:f {:RESULT=f;:}
;

sign ::=
  {:Logger.print("Sign: +");:} PLUS |
  {:Logger.print("Sign: -");:} MINUS
;

sign_optional ::=
  {:Logger.print("Sign Optional - Vazio");:} |
  {:Logger.print("Sign Optional - line 2");:} sign
;

string ::=
  {:Logger.print("String");:} STRING_LITERAL:s {:RESULT=s;:}
;

boolean ::=
  {:Logger.print("True");:} TRUE |
  {:Logger.print("False");:} FALSE
;

type_identifier ::=
  {:Logger.print("Type Identifier");:} IDENTIFIER
;

constant ::=
  {:Logger.print("Contant - [sign] const_aux");:}  sign_optional const_aux:ca {:RESULT=ca;:} |
  {:Logger.print("Contant - String");:} string:s {:RESULT=s;:}
;

const_aux ::=
  {:Logger.print("Contant Aux - ID");:}  constant_identifier:ci {:RESULT=ci;:}|
  {:Logger.print("Contant Aux - Number");:} number:n {:RESULT=n;:}
;
