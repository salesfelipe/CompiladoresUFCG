import compiler.util.*;

parser code  {:
 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }
:};

terminal PROGRAM, BEGIN, AND, ARRAY, LABEL, CONST, TYPE;
terminal DOT, LPAREN, RPAREN, COMMA, SEMICOLON;
terminal java.lang.String IDENTIFIER;
terminal INTEGER_LITERAL, PLUS, MINUS, EQUALS;

non terminal compilation_unit, program_heading, block, identifier_list, identifier_list_aux;
non terminal declaration_part, declaration_part_optional, declaration_part_required, procedure_and_function_declaration_part;
non terminal label_declaration_part, constant_definition_part, type_definition_part, variable_declaration_part;
non terminal label, label_optionals;
non terminal constant_definition, constant_definition_aux, constant;
non terminal statement_part;
non terminal sign, sign_optional, digit_sequence, integer_number;

start with compilation_unit;

compilation_unit ::=
	program_heading block DOT
;

// Programs and Blocks

program_heading ::=  {:Logger.print("Program Heading");:}
   PROGRAM IDENTIFIER identifier_list SEMICOLON
;

block ::=
	declaration_part statement_part {:Logger.print("block");:}
;

declaration_part ::= {:Logger.print("Declaration Part");:}
	declaration_part_optional declaration_part_required 
;

declaration_part_optional ::= {:Logger.print("Declaration Part optional");:}
	| label_declaration_part
	| constant_definition_part
	| type_definition_part
	| variable_declaration_part
;

declaration_part_required ::= {:Logger.print("Declaration Part required");:}
	procedure_and_function_declaration_part
;

label_declaration_part ::=
	LABEL label label_optionals SEMICOLON
;

label_optionals ::=
	| COMMA label label_optionals
;

constant_definition_part ::=
	CONST constant_definition SEMICOLON constant_definition_aux
;

constant_definition ::=
	IDENTIFIER EQUALS constant 
;

constant_definition_aux ::=
	| constant_definition SEMICOLON constant_definition_aux
;



// END BLOCK AND PROGRAMS

statement_part ::=
;


constant ::=
	sign_optional constant_identifier
	| sign_optional number
	| string 
;

constant_identifier ::=
	IDENTIFIER
;

identifier_list ::= 
	| LPAREN identifier_list_aux RPAREN
;

identifier_list_aux ::=
	| IDENTIFIER
	| IDENTIFIER COMMA identifier_list_aux
;

number ::=
	integer_number | real_number
;

integer_number ::=
	digit_sequence
;

digit_sequence ::= 
	sign_optional INTEGER_LITERAL
;

sign ::= PLUS | MINUS;

sign_optional ::=
	| sign
;

type ::=
	simple_type | structured_type | pointer_type | type_identifier
;


procedure_and_function_declaration_part ::= 
;

real_number ::=
;

string ::=
;

simple_type ::=
;

structured_type ::=
;

pointer_type ::=
;

type_identifier ::=
;



